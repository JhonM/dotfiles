-- Example init.lua showing how to integrate the DAP configuration

-- Bootstrap lazy.nvim (or your preferred package manager)
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- Plugin configuration with lazy.nvim
require("lazy").setup({
  -- DAP related plugins
  {
    "mfussenegger/nvim-dap",
    dependencies = {
      "rcarriga/nvim-dap-ui",
      "williamboman/mason.nvim",
      "jayp0521/mason-nvim-dap.nvim",
    },
    config = function()
      -- Load our custom DAP configuration
      require('dap-config').setup()
      
      -- Set up keybindings for debugging
      vim.keymap.set('n', '<F5>', function() require('dap').continue() end)
      vim.keymap.set('n', '<F10>', function() require('dap').step_over() end)
      vim.keymap.set('n', '<F11>', function() require('dap').step_into() end)
      vim.keymap.set('n', '<F12>', function() require('dap').step_out() end)
      vim.keymap.set('n', '<Leader>b', function() require('dap').toggle_breakpoint() end)
      vim.keymap.set('n', '<Leader>B', function() require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: ')) end)
      vim.keymap.set('n', '<Leader>lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)
      vim.keymap.set('n', '<Leader>dr', function() require('dap').repl.open() end)
      vim.keymap.set('n', '<Leader>dl', function() require('dap').run_last() end)
      vim.keymap.set('n', '<Leader>du', function() require('dapui').toggle() end)
    end,
  },
  
  -- DAP UI
  {
    "rcarriga/nvim-dap-ui",
    dependencies = { "mfussenegger/nvim-dap" },
  },
  
  -- Mason for managing external tools
  {
    "williamboman/mason.nvim",
    config = function()
      require("mason").setup()
    end,
  },
  
  -- Mason-DAP integration
  {
    "jayp0521/mason-nvim-dap.nvim",
    dependencies = { "williamboman/mason.nvim", "mfussenegger/nvim-dap" },
    config = function()
      require("mason-nvim-dap").setup({
        ensure_installed = { "node-debug2-adapter", "chrome-debug-adapter" },
        automatic_installation = true,
      })
    end,
  },
  
  -- Other plugins for TypeScript/JavaScript development
  
  -- TypeScript syntax highlighting and tools
  {
    "pmizio/typescript-tools.nvim",
    dependencies = { "nvim-lua/plenary.nvim", "neovim/nvim-lspconfig" },
    config = function()
      require("typescript-tools").setup {}
    end,
  },
  
  -- Astro syntax support
  {
    "wuelnerdotexe/vim-astro",
  },
  
  -- LSP Configuration
  {
    "neovim/nvim-lspconfig",
    dependencies = {
      "williamboman/mason.nvim",
      "williamboman/mason-lspconfig.nvim",
    },
    config = function()
      require("mason-lspconfig").setup({
        ensure_installed = {
          "tsserver",
          "astro",
          "tailwindcss",
          "eslint",
        },
      })
      
      -- Basic LSP setup
      local lspconfig = require("lspconfig")
      
      -- TypeScript
      lspconfig.tsserver.setup({})
      
      -- Astro
      lspconfig.astro.setup({})
      
      -- Tailwind CSS
      lspconfig.tailwindcss.setup({})
      
      -- ESLint
      lspconfig.eslint.setup({})
    end,
  },
  
  -- Completion
  {
    "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-path",
      "L3MON4D3/LuaSnip",
      "saadparwaiz1/cmp_luasnip",
    },
    config = function()
      local cmp = require("cmp")
      local luasnip = require("luasnip")
      
      cmp.setup({
        snippet = {
          expand = function(args)
            luasnip.lsp_expand(args.body)
          end,
        },
        mapping = cmp.mapping.preset.insert({
          ["<C-Space>"] = cmp.mapping.complete(),
          ["<CR>"] = cmp.mapping.confirm({ select = true }),
          ["<Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
              luasnip.expand_or_jump()
            else
              fallback()
            end
          end, { "i", "s" }),
          ["<S-Tab>"] = cmp.mapping(function(fallback)
            if cmp.visible() then
              cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
              luasnip.jump(-1)
            else
              fallback()
            end
          end, { "i", "s" }),
        }),
        sources = cmp.config.sources({
          { name = "nvim_lsp" },
          { name = "luasnip" },
          { name = "buffer" },
          { name = "path" },
        }),
      })
    end,
  },
})

-- Additional editor settings
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.expandtab = true
vim.opt.shiftwidth = 2
vim.opt.tabstop = 2
vim.opt.smartindent = true
vim.opt.termguicolors = true

-- Set leader key
vim.g.mapleader = " "

-- Basic key mappings
vim.keymap.set("n", "<leader>e", ":Explore<CR>")
vim.keymap.set("n", "<leader>w", ":w<CR>")
vim.keymap.set("n", "<leader>q", ":q<CR>")

-- Project-specific settings for 9292 Frontend
vim.api.nvim_create_autocmd("FileType", {
  pattern = { "astro", "typescript", "typescriptreact", "javascript", "javascriptreact" },
  callback = function()
    -- Set up formatters or other project-specific settings
    vim.opt_local.formatoptions:append("r")
    vim.opt_local.formatoptions:append("o")
  end,
})

-- Create a user command to start the 9292 development server
vim.api.nvim_create_user_command("Dev9292", function()
  vim.cmd("terminal pnpm run dev")
end, {})

-- Create a user command to run tests
vim.api.nvim_create_user_command("Test9292", function()
  vim.cmd("terminal pnpm run test")
end, {})




























-- nvim-dap configuration for 9292 Frontend project
-- This file should be placed in your Neovim config directory, typically ~/.config/nvim/lua/
-- You can then require it in your init.lua or init.vim

local dap = require('dap')
local dapui = require('dapui')

-- Configure JavaScript/TypeScript debugging with vscode-js-debug
dap.adapters.node2 = {
  type = 'executable',
  command = 'node',
  args = { os.getenv('HOME') .. '/.local/share/nvim/mason/packages/node-debug2-adapter/out/src/nodeDebug.js' },
}

-- Configuration for debugging Node.js
dap.configurations.javascript = {
  {
    name = 'Launch Node.js',
    type = 'node2',
    request = 'launch',
    program = '${file}',
    cwd = '${workspaceFolder}',
    sourceMaps = true,
    protocol = 'inspector',
    console = 'integratedTerminal',
  },
  {
    name = 'Attach to Node Process',
    type = 'node2',
    request = 'attach',
    processId = require('dap.utils').pick_process,
    cwd = '${workspaceFolder}',
    sourceMaps = true,
  },
}

-- Configuration for TypeScript
dap.configurations.typescript = {
  {
    name = 'Launch TypeScript',
    type = 'node2',
    request = 'launch',
    program = '${file}',
    cwd = '${workspaceFolder}',
    sourceMaps = true,
    protocol = 'inspector',
    console = 'integratedTerminal',
    outFiles = { "${workspaceFolder}/dist/**/*.js" },
    runtimeExecutable = 'node',
    runtimeArgs = { '--loader', 'ts-node/esm' },
  },
  {
    name = 'Attach to TypeScript Process',
    type = 'node2',
    request = 'attach',
    processId = require('dap.utils').pick_process,
    cwd = '${workspaceFolder}',
    sourceMaps = true,
    outFiles = { "${workspaceFolder}/dist/**/*.js" },
  },
}

-- Configuration for React/TypeScript in browser
dap.adapters.chrome = {
  type = 'executable',
  command = 'node',
  args = { os.getenv('HOME') .. '/.local/share/nvim/mason/packages/chrome-debug-adapter/out/src/chromeDebug.js' }
}

dap.configurations.javascriptreact = {
  {
    name = 'Debug React App',
    type = 'chrome',
    request = 'launch',
    url = 'http://localhost:3000',
    webRoot = '${workspaceFolder}',
    sourceMaps = true,
    sourceMapPathOverrides = {
      ['webpack:///src/*'] = '${webRoot}/src/*',
    },
    userDataDir = false,
  }
}

dap.configurations.typescriptreact = dap.configurations.javascriptreact

-- Configuration for Astro
dap.configurations.astro = {
  {
    name = 'Debug Astro App',
    type = 'chrome',
    request = 'launch',
    url = 'http://localhost:4321', -- Default Astro dev server port
    webRoot = '${workspaceFolder}',
    sourceMaps = true,
    sourceMapPathOverrides = {
      ['webpack:///src/*'] = '${webRoot}/src/*',
    },
    userDataDir = false,
  }
}

-- Configuration for Jest tests
dap.configurations.javascript = vim.list_extend(dap.configurations.javascript, {
  {
    type = 'node2',
    request = 'launch',
    name = 'Jest Tests',
    program = '${workspaceFolder}/node_modules/.bin/jest',
    args = { '--runInBand' },
    cwd = '${workspaceFolder}',
    console = 'integratedTerminal',
    internalConsoleOptions = 'neverOpen',
    sourceMaps = true,
  }
})

-- Configuration for Vitest
dap.configurations.javascript = vim.list_extend(dap.configurations.javascript, {
  {
    type = 'node2',
    request = 'launch',
    name = 'Vitest',
    program = '${workspaceFolder}/node_modules/.bin/vitest',
    args = { 'run' },
    cwd = '${workspaceFolder}',
    console = 'integratedTerminal',
    internalConsoleOptions = 'neverOpen',
    sourceMaps = true,
  }
})

-- Configuration for Playwright
dap.configurations.javascript = vim.list_extend(dap.configurations.javascript, {
  {
    type = 'node2',
    request = 'launch',
    name = 'Playwright Tests',
    program = '${workspaceFolder}/node_modules/.bin/playwright',
    args = { 'test' },
    cwd = '${workspaceFolder}',
    console = 'integratedTerminal',
    internalConsoleOptions = 'neverOpen',
    sourceMaps = true,
  }
})

-- Configuration for debugging pnpm scripts
dap.configurations.javascript = vim.list_extend(dap.configurations.javascript, {
  {
    type = 'node2',
    request = 'launch',
    name = 'Debug pnpm Script',
    runtimeExecutable = 'pnpm',
    runtimeArgs = function()
      local script_name = vim.fn.input('Script name: ')
      return { 'run', script_name }
    end,
    cwd = '${workspaceFolder}',
    console = 'integratedTerminal',
    internalConsoleOptions = 'neverOpen',
    sourceMaps = true,
  }
})

-- Add a custom command to start debugging the current workspace with Astro
vim.api.nvim_create_user_command('DebugAstro', function()
  dap.run({
    name = 'Debug Astro App',
    type = 'chrome',
    request = 'launch',
    url = 'http://localhost:4321',
    webRoot = vim.fn.getcwd(),
    sourceMaps = true,
    sourceMapPathOverrides = {
      ['webpack:///src/*'] = vim.fn.getcwd() .. '/src/*',
    },
    userDataDir = false,
  })
end, {})

-- Add a custom command to debug the current project's web app
vim.api.nvim_create_user_command('DebugWeb', function()
  local cmd = vim.fn.input('Command to debug (dev/test/build): ', 'dev')
  dap.run({
    type = 'node2',
    request = 'launch',
    name = 'Debug Web App',
    runtimeExecutable = 'pnpm',
    runtimeArgs = { '--filter', 'web', 'run', cmd },
    cwd = vim.fn.getcwd(),
    console = 'integratedTerminal',
    sourceMaps = true,
  })
end, {})

-- Set up DAP UI
dapui.setup({
  layouts = {
    {
      elements = {
        { id = "scopes", size = 0.25 },
        { id = "breakpoints", size = 0.25 },
        { id = "stacks", size = 0.25 },
        { id = "watches", size = 0.25 },
      },
      size = 40,
      position = "left",
    },
    {
      elements = {
        { id = "repl", size = 0.5 },
        { id = "console", size = 0.5 },
      },
      size = 10,
      position = "bottom",
    },
  },
})

-- Automatically open and close dapui when starting/stopping debugging
dap.listeners.after.event_initialized["dapui_config"] = function()
  dapui.open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
  dapui.close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
  dapui.close()
end

-- Key mappings for debugging
-- These should be added to your keymaps configuration
--[[
vim.keymap.set('n', '<F5>', function() require('dap').continue() end)
vim.keymap.set('n', '<F10>', function() require('dap').step_over() end)
vim.keymap.set('n', '<F11>', function() require('dap').step_into() end)
vim.keymap.set('n', '<F12>', function() require('dap').step_out() end)
vim.keymap.set('n', '<Leader>b', function() require('dap').toggle_breakpoint() end)
vim.keymap.set('n', '<Leader>B', function() require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: ')) end)
vim.keymap.set('n', '<Leader>lp', function() require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: ')) end)
vim.keymap.set('n', '<Leader>dr', function() require('dap').repl.open() end)
vim.keymap.set('n', '<Leader>dl', function() require('dap').run_last() end)
vim.keymap.set('n', '<Leader>du', function() require('dapui').toggle() end)
]]--

-- Return the module
return {
  setup = function()
    -- Any additional setup can go here
  end
}
